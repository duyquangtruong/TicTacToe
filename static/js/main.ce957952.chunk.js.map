{"version":3,"sources":["index.js"],"names":["Square","props","winLine","className","style","color","onClick","value","Board","renderSquare","i","squares","j","col","row","push","render","Game","Array","fill","useState","moves","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","isAcscending","setIsAcscending","jumpTo","step","status","list","current","winner","calculateWinner","map","move","desc","parseInt","key","fontWeight","some","x","reverse","newHistory","slice","length","concat","handleClick","lines","a","b","c","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ce957952.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nconst boardSize = 3;\r\n\r\nfunction Square(props) {\r\n  if (props.winLine) {\r\n    return (\r\n      <button\r\n        className=\"square\"\r\n        style={{ color: \"red\" }}\r\n        onClick={props.onClick}\r\n      >\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Board(props) {\r\n  const renderSquare = (i) => {\r\n    if (\r\n      props.winLine &&\r\n      (i === props.winLine[0] ||\r\n        i === props.winLine[1] ||\r\n        i === props.winLine[2])\r\n    ) {\r\n      return (\r\n        <Square\r\n          value={props.squares[i]}\r\n          onClick={() => props.onClick(i)}\r\n          winLine={true}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <Square\r\n        value={props.squares[i]}\r\n        onClick={() => props.onClick(i)}\r\n        winLine={false}\r\n      />\r\n    );\r\n  };\r\n\r\n  const render = () => {\r\n    let i;\r\n    let j;\r\n    var col = [];\r\n    var row = [];\r\n    for (i = 0; i < boardSize; i++) {\r\n      for (j = 0; j < boardSize; j++) {\r\n        col.push(renderSquare(boardSize * i + j));\r\n      }\r\n      row.push(<div className=\"board-row\">{col}</div>);\r\n      col = [];\r\n    }\r\n    return <div>{row}</div>;\r\n  };\r\n\r\n  return render();\r\n}\r\n\r\nfunction Game() {\r\n  const squares = Array(9).fill(null);\r\n  const moves = [];\r\n  const [history, setHistory] = useState([{ squares, moves }]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [isAcscending, setIsAcscending] = useState(true);\r\n\r\n  const handleClick = (i) => {\r\n    const newHistory = history.slice(0, stepNumber + 1);\r\n    const current = newHistory[newHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    const moves = current.moves.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    moves.push(i);\r\n\r\n    setHistory(newHistory.concat({ squares, moves }));\r\n    setStepNumber(newHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n\r\n  const render = () => {\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move\r\n        ? \"Go to move #\" +\r\n          move +\r\n          \"(\" +\r\n          (step.moves[move - 1] % boardSize) +\r\n          \", \" +\r\n          parseInt(step.moves[move - 1] / boardSize) +\r\n          \")\"\r\n        : \"Go to game start\";\r\n      if (move === stepNumber) {\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => jumpTo(move)} style={{ fontWeight: \"bold\" }}>\r\n              {desc}\r\n            </button>\r\n          </li>\r\n        );\r\n      }\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + current.squares[winner[0]];\r\n    } else {\r\n      if (current.squares.some((x) => x === null) === false) {\r\n        status = \"Draw\";\r\n      } else {\r\n        status = \"next player: \" + (xIsNext ? \"X\" : \"O\");\r\n      }\r\n    }\r\n    let list;\r\n    if (isAcscending) {\r\n      list = <ol>{moves}</ol>;\r\n    } else {\r\n      list = <ol>{moves.reverse()}</ol>;\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => handleClick(i)}\r\n            winLine={winner}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button\r\n            onClick={() => {\r\n              setIsAcscending(!isAcscending);\r\n            }}\r\n          >\r\n            Reverse Sort\r\n          </button>\r\n          {list}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  return render();\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [a, b, c];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}