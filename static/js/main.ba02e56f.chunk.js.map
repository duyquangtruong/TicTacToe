{"version":3,"sources":["index.js"],"names":["Square","props","winLine","className","style","color","onClick","value","Board","i","this","squares","j","col","row","push","renderSquare","React","Component","Game","state","history","Array","fill","moves","stepNumber","xIsNext","isAcscending","slice","current","length","calculateWinner","setState","concat","step","status","list","winner","map","move","desc","parseInt","key","jumpTo","fontWeight","some","x","reverse","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba02e56f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nfunction Square(props) {\r\n  if (props.winLine) {\r\n    return (\r\n      <button\r\n        className=\"square\"\r\n        style={{ color: \"red\" }}\r\n        onClick={props.onClick}\r\n      >\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    if (\r\n      this.props.winLine &&\r\n      (i === this.props.winLine[0] ||\r\n        i === this.props.winLine[1] ||\r\n        i === this.props.winLine[2])\r\n    ) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n          winLine={true}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        winLine={false}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let i;\r\n    let j;\r\n    var col = [];\r\n    var row = [];\r\n    for (i = 0; i < 3; i++) {\r\n      for (j = 0; j < 3; j++) {\r\n        col.push(this.renderSquare(3 * i + j));\r\n      }\r\n      row.push(<div className=\"board-row\">{col}</div>);\r\n      col = [];\r\n    }\r\n    return <div>{row}</div>;\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          moves: [],\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isAcscending: true,\r\n    };\r\n  }\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const moves = current.moves.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    moves.push(i);\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          moves: moves,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move\r\n        ? \"Go to move #\" +\r\n          move +\r\n          \"(\" +\r\n          (step.moves[move - 1] % 3) +\r\n          \", \" +\r\n          parseInt(step.moves[move - 1] / 3) +\r\n          \")\"\r\n        : \"Go to game start\";\r\n      if (move === this.state.stepNumber) {\r\n        return (\r\n          <li key={move}>\r\n            <button\r\n              onClick={() => this.jumpTo(move)}\r\n              style={{ fontWeight: \"bold\" }}\r\n            >\r\n              {desc}\r\n            </button>\r\n          </li>\r\n        );\r\n      }\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + current.squares[winner[0]];\r\n    } else {\r\n      if (current.squares.some((x) => x === null) === false) {\r\n        status = \"Draw\";\r\n      } else {\r\n        status = \"next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n    }\r\n    let list;\r\n    if (this.state.isAcscending) {\r\n      list = <ol>{moves}</ol>;\r\n    } else {\r\n      list = <ol>{moves.reverse()}</ol>;\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winLine={winner}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button\r\n            onClick={() => {\r\n              this.setState({\r\n                isAcscending: !this.state.isAcscending,\r\n              });\r\n            }}\r\n          >\r\n            Reverse Sort\r\n          </button>\r\n          {list}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [a, b, c];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}